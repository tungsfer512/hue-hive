{"version":3,"file":"hive-parser-75031a8f-chunk-a2a4f8506cb55bb7.js","mappingssources":["webpack:///./desktop/core/src/desktop/js/parse/sql/hive/sqlParseSupport.js"],"sourcesContent":["// Licensed to Cloudera, Inc. under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  Cloudera, Inc. licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport KEYWORDS from \"./keywords.json\";\nimport { matchesType } from 'sql/reference/typeUtils';\nimport { initSharedAutocomplete, initSyntaxParser, identifierEquals, equalIgnoreCase, SIMPLE_TABLE_REF_SUGGESTIONS, adjustForPartialBackticks } from \"../sqlParseUtils\";\nvar initSqlParser = function initSqlParser(parser) {\n  initSharedAutocomplete(parser);\n  parser.DDL_AND_DML_KEYWORDS = ['ABORT', 'ALTER', 'ANALYZE TABLE', 'CREATE', 'DELETE', 'DESCRIBE', 'DROP', 'EXPORT', 'GRANT', 'IMPORT', 'INSERT', 'LOAD', 'MERGE', 'MSCK', 'RELOAD FUNCTION', 'RESET', 'REVOKE', 'SELECT', 'SET', 'SHOW', 'TRUNCATE', 'UPDATE', 'USE', 'WITH'];\n  parser.prepareNewStatement = function () {\n    linkTablePrimaries();\n    parser.commitLocations();\n    delete parser.yy.lateralViews;\n    delete parser.yy.latestCommonTableExpressions;\n    delete parser.yy.correlatedSubQuery;\n    parser.yy.subQueries = [];\n    parser.yy.selectListAliases = [];\n    parser.yy.latestTablePrimaries = [];\n    prioritizeSuggestions();\n  };\n  parser.yy.parseError = function (message, error) {\n    parser.yy.errors.push(error);\n    return message;\n  };\n  parser.addCommonTableExpressions = function (identifiers) {\n    parser.yy.result.commonTableExpressions = identifiers;\n    parser.yy.latestCommonTableExpressions = identifiers;\n  };\n  parser.isInSubquery = function () {\n    return !!parser.yy.primariesStack.length;\n  };\n  parser.pushQueryState = function () {\n    parser.yy.resultStack.push(parser.yy.result);\n    parser.yy.locationsStack.push(parser.yy.locations);\n    parser.yy.lateralViewsStack.push(parser.yy.lateralViews);\n    parser.yy.selectListAliasesStack.push(parser.yy.selectListAliases);\n    parser.yy.primariesStack.push(parser.yy.latestTablePrimaries);\n    parser.yy.subQueriesStack.push(parser.yy.subQueries);\n    parser.yy.result = {};\n    parser.yy.locations = [];\n    parser.yy.selectListAliases = []; // Not allowed in correlated sub-queries\n    parser.yy.lateralViews = []; // Not allowed in correlated sub-queries\n\n    if (parser.yy.correlatedSubQuery) {\n      parser.yy.latestTablePrimaries = parser.yy.latestTablePrimaries.concat();\n      parser.yy.subQueries = parser.yy.subQueries.concat();\n    } else {\n      parser.yy.latestTablePrimaries = [];\n      parser.yy.subQueries = [];\n    }\n  };\n  parser.popQueryState = function (subQuery) {\n    linkTablePrimaries();\n    parser.commitLocations();\n    if (Object.keys(parser.yy.result).length === 0) {\n      parser.yy.result = parser.yy.resultStack.pop();\n    } else {\n      parser.yy.resultStack.pop();\n    }\n    var oldSubQueries = parser.yy.subQueries;\n    parser.yy.subQueries = parser.yy.subQueriesStack.pop();\n    if (subQuery) {\n      if (oldSubQueries.length > 0) {\n        subQuery.subQueries = oldSubQueries;\n      }\n      parser.yy.subQueries.push(subQuery);\n    }\n    parser.yy.lateralViews = parser.yy.lateralViewsStack.pop();\n    parser.yy.latestTablePrimaries = parser.yy.primariesStack.pop();\n    parser.yy.locations = parser.yy.locationsStack.pop();\n    parser.yy.selectListAliases = parser.yy.selectListAliasesStack.pop();\n  };\n  parser.suggestSelectListAliases = function () {\n    if (parser.yy.selectListAliases && parser.yy.selectListAliases.length > 0 && parser.yy.result.suggestColumns && (typeof parser.yy.result.suggestColumns.identifierChain === 'undefined' || parser.yy.result.suggestColumns.identifierChain.length === 0)) {\n      parser.yy.result.suggestColumnAliases = parser.yy.selectListAliases;\n    }\n  };\n  parser.mergeSuggestKeywords = function () {\n    var result = [];\n    Array.prototype.slice.call(arguments).forEach(function (suggestion) {\n      if (typeof suggestion !== 'undefined' && typeof suggestion.suggestKeywords !== 'undefined') {\n        result = result.concat(suggestion.suggestKeywords);\n      }\n    });\n    if (result.length > 0) {\n      return {\n        suggestKeywords: result\n      };\n    }\n    return {};\n  };\n  parser.suggestValueExpressionKeywords = function (valueExpression, extras) {\n    var expressionKeywords = parser.getValueExpressionKeywords(valueExpression, extras);\n    parser.suggestKeywords(expressionKeywords.suggestKeywords);\n    if (expressionKeywords.suggestColRefKeywords) {\n      parser.suggestColRefKeywords(expressionKeywords.suggestColRefKeywords);\n    }\n    if (valueExpression.lastType) {\n      parser.addColRefIfExists(valueExpression.lastType);\n    } else {\n      parser.addColRefIfExists(valueExpression);\n    }\n  };\n  parser.getSelectListKeywords = function (excludeAsterisk) {\n    var keywords = [{\n      value: 'CASE',\n      weight: 450\n    }, 'EXISTS', 'FALSE', 'TRUE', 'NULL', 'NOT'];\n    if (!excludeAsterisk) {\n      keywords.push({\n        value: '*',\n        weight: 10000\n      });\n    }\n    return keywords;\n  };\n  parser.getValueExpressionKeywords = function (valueExpression, extras) {\n    var types = valueExpression.lastType ? valueExpression.lastType.types : valueExpression.types;\n    // We could have valueExpression.columnReference to suggest based on column type\n    var keywords = ['<', '<=', '<=>', '<>', '=', '>', '>=', 'BETWEEN', 'IN', 'IS NOT NULL', 'IS NULL', 'IS NOT TRUE', 'IS TRUE', 'IS NOT FALSE', 'IS FALSE', 'NOT BETWEEN', 'NOT IN'];\n    if (extras) {\n      keywords = keywords.concat(extras);\n    }\n    if (valueExpression.suggestKeywords) {\n      keywords = keywords.concat(valueExpression.suggestKeywords);\n    }\n    if (types.length === 1 && types[0] === 'COLREF') {\n      return {\n        suggestKeywords: keywords,\n        suggestColRefKeywords: {\n          BOOLEAN: ['AND', 'OR'],\n          NUMBER: ['+', '-', '*', '/', '%', 'DIV'],\n          STRING: ['LIKE', 'NOT LIKE', 'REGEXP', 'RLIKE']\n        }\n      };\n    }\n    if (matchesType(parser.yy.activeDialect, ['BOOLEAN'], types)) {\n      keywords = keywords.concat(['AND', 'OR']);\n    }\n    if (matchesType(parser.yy.activeDialect, ['NUMBER'], types)) {\n      keywords = keywords.concat(['+', '-', '*', '/', '%', 'DIV']);\n    }\n    if (matchesType(parser.yy.activeDialect, ['STRING'], types)) {\n      keywords = keywords.concat(['LIKE', 'NOT LIKE', 'REGEXP', 'RLIKE']);\n    }\n    return {\n      suggestKeywords: keywords\n    };\n  };\n  parser.getTypeKeywords = function () {\n    return ['BIGINT', 'BINARY', 'BOOLEAN', 'CHAR', 'DATE', 'DECIMAL', 'DOUBLE', 'DOUBLE PRECISION', 'FLOAT', 'INT', 'INTEGER', 'SMALLINT', 'TIMESTAMP', 'STRING', 'TINYINT', 'VARCHAR'];\n  };\n  parser.getColumnDataTypeKeywords = function () {\n    return parser.getTypeKeywords().concat(['ARRAY<>', 'MAP<>', 'STRUCT<>', 'UNIONTYPE<>']);\n  };\n  parser.addColRefIfExists = function (valueExpression) {\n    if (valueExpression.columnReference) {\n      parser.yy.result.colRef = {\n        identifierChain: valueExpression.columnReference\n      };\n    }\n  };\n  parser.selectListNoTableSuggest = function (selectListEdit, hasDistinctOrAll) {\n    if (selectListEdit.cursorAtStart) {\n      var keywords = parser.getSelectListKeywords();\n      if (!hasDistinctOrAll) {\n        keywords = keywords.concat([{\n          value: 'ALL',\n          weight: 2\n        }, {\n          value: 'DISTINCT',\n          weight: 2\n        }]);\n      }\n      parser.suggestKeywords(keywords);\n    } else {\n      parser.checkForKeywords(selectListEdit);\n    }\n    if (selectListEdit.suggestFunctions) {\n      parser.suggestFunctions();\n    }\n    if (selectListEdit.suggestColumns) {\n      parser.suggestColumns();\n    }\n    if (selectListEdit.suggestAggregateFunctions && (!hasDistinctOrAll || hasDistinctOrAll === 'ALL')) {\n      parser.suggestAggregateFunctions();\n      parser.suggestAnalyticFunctions();\n    }\n  };\n  parser.suggestJoinConditions = function (details) {\n    parser.yy.result.suggestJoinConditions = details || {};\n    if (parser.yy.latestTablePrimaries && !parser.yy.result.suggestJoinConditions.tablePrimaries) {\n      parser.yy.result.suggestJoinConditions.tablePrimaries = parser.yy.latestTablePrimaries.concat();\n    }\n  };\n  parser.suggestJoins = function (details) {\n    parser.yy.result.suggestJoins = details || {};\n  };\n  parser.valueExpressionSuggest = function (oppositeValueExpression, operator) {\n    if (oppositeValueExpression && oppositeValueExpression.columnReference) {\n      parser.suggestValues();\n      parser.yy.result.colRef = {\n        identifierChain: oppositeValueExpression.columnReference\n      };\n    }\n    parser.suggestColumns();\n    parser.suggestFunctions();\n    var keywords = [{\n      value: 'CASE',\n      weight: 450\n    }, {\n      value: 'FALSE',\n      weight: 450\n    }, {\n      value: 'NULL',\n      weight: 450\n    }, {\n      value: 'TRUE',\n      weight: 450\n    }];\n    keywords = keywords.concat(['EXISTS', 'NOT']);\n    if (oppositeValueExpression && oppositeValueExpression.types[0] === 'NUMBER') {\n      parser.applyTypeToSuggestions(oppositeValueExpression);\n    }\n    parser.suggestKeywords(keywords);\n  };\n  parser.findCaseType = function (whenThenList) {\n    var types = {};\n    whenThenList.caseTypes.forEach(function (valueExpression) {\n      valueExpression.types.forEach(function (type) {\n        types[type] = true;\n      });\n    });\n    if (Object.keys(types).length === 1) {\n      return {\n        types: [Object.keys(types)[0]]\n      };\n    }\n    return {\n      types: ['T']\n    };\n  };\n  parser.applyArgumentTypesToSuggestions = function (functionName, position) {\n    if (parser.yy.result.suggestFunctions || parser.yy.result.suggestColumns) {\n      parser.yy.result.udfArgument = {\n        name: functionName.toLowerCase(),\n        position: position\n      };\n    }\n  };\n  parser.commitLocations = function () {\n    if (parser.yy.locations.length === 0) {\n      return;\n    }\n    var tablePrimaries = parser.yy.latestTablePrimaries;\n    var i = parser.yy.locations.length;\n    var _loop = function _loop() {\n      var location = parser.yy.locations[i];\n      if (location.type === 'variable' && location.colRef) {\n        parser.expandIdentifierChain({\n          wrapper: location.colRef,\n          tablePrimaries: tablePrimaries,\n          isColumnWrapper: true\n        });\n        delete location.colRef.linked;\n      }\n      if (location.type === 'unknown') {\n        if (typeof location.identifierChain !== 'undefined' && location.identifierChain.length > 0 && location.identifierChain.length <= 2 && tablePrimaries) {\n          var found = tablePrimaries.filter(function (primary) {\n            return equalIgnoreCase(primary.alias, location.identifierChain[0].name) || primary.identifierChain && equalIgnoreCase(primary.identifierChain[0].name, location.identifierChain[0].name);\n          });\n          if (!found.length && location.firstInChain) {\n            found = tablePrimaries.filter(function (primary) {\n              return !primary.alias && primary.identifierChain && equalIgnoreCase(primary.identifierChain[primary.identifierChain.length - 1].name, location.identifierChain[0].name);\n            });\n          }\n          if (found.length) {\n            if (found[0].identifierChain.length > 1 && location.identifierChain.length === 1 && equalIgnoreCase(found[0].identifierChain[0].name, location.identifierChain[0].name)) {\n              location.type = 'database';\n            } else if (found[0].alias && equalIgnoreCase(location.identifierChain[0].name, found[0].alias) && location.identifierChain.length > 1) {\n              location.type = 'column';\n              parser.expandIdentifierChain({\n                tablePrimaries: tablePrimaries,\n                wrapper: location,\n                anyOwner: true\n              });\n            } else if (!found[0].alias && found[0].identifierChain && equalIgnoreCase(location.identifierChain[0].name, found[0].identifierChain[found[0].identifierChain.length - 1].name) && location.identifierChain.length > 1) {\n              location.type = 'column';\n              parser.expandIdentifierChain({\n                tablePrimaries: tablePrimaries,\n                wrapper: location,\n                anyOwner: true\n              });\n            } else {\n              location.type = 'table';\n              parser.expandIdentifierChain({\n                tablePrimaries: tablePrimaries,\n                wrapper: location,\n                anyOwner: true\n              });\n            }\n          } else if (parser.yy.subQueries) {\n            found = parser.yy.subQueries.filter(function (subQuery) {\n              return equalIgnoreCase(subQuery.alias, location.identifierChain[0].name);\n            });\n            if (found.length > 0) {\n              location.type = 'subQuery';\n              location.identifierChain = [{\n                subQuery: found[0].alias\n              }];\n            }\n          }\n        }\n      }\n      if (location.type === 'asterisk' && !location.linked) {\n        if (tablePrimaries && tablePrimaries.length > 0) {\n          location.tables = [];\n          location.linked = false;\n          if (!location.identifierChain) {\n            location.identifierChain = [{\n              asterisk: true\n            }];\n          }\n          parser.expandIdentifierChain({\n            tablePrimaries: tablePrimaries,\n            wrapper: location,\n            anyOwner: false\n          });\n          if (location.tables.length === 0) {\n            parser.yy.locations.splice(i, 1);\n          }\n        } else {\n          parser.yy.locations.splice(i, 1);\n        }\n      }\n      if (location.type === 'table' && typeof location.identifierChain !== 'undefined' && location.identifierChain.length === 1 && location.identifierChain[0].name) {\n        // Could be a cte reference\n        parser.yy.locations.some(function (otherLocation) {\n          if (otherLocation.type === 'alias' && otherLocation.source === 'cte' && identifierEquals(otherLocation.alias, location.identifierChain[0].name)) {\n            // TODO: Possibly add the other location if we want to show the link in the future.\n            //       i.e. highlight select definition on hover over alias, also for subquery references.\n            location.type = 'alias';\n            location.target = 'cte';\n            location.alias = location.identifierChain[0].name;\n            delete location.identifierChain;\n            return true;\n          }\n        });\n      }\n      if (location.type === 'table' && (typeof location.identifierChain === 'undefined' || location.identifierChain.length === 0)) {\n        parser.yy.locations.splice(i, 1);\n      }\n      if (location.type === 'unknown') {\n        location.type = 'column';\n      }\n\n      // A column location might refer to a previously defined alias, i.e. last 'foo' in \"SELECT cast(id AS int) foo FROM tbl ORDER BY foo;\"\n      if (location.type === 'column') {\n        for (var j = i - 1; j >= 0; j--) {\n          var otherLocation = parser.yy.locations[j];\n          if (otherLocation.type === 'alias' && otherLocation.source === 'column' && location.identifierChain && location.identifierChain.length === 1 && location.identifierChain[0].name && otherLocation.alias && location.identifierChain[0].name.toLowerCase() === otherLocation.alias.toLowerCase()) {\n            location.type = 'alias';\n            location.source = 'column';\n            location.alias = location.identifierChain[0].name;\n            delete location.identifierChain;\n            location.parentLocation = otherLocation.parentLocation;\n            break;\n          }\n        }\n      }\n      if (location.type === 'column') {\n        if (!location.linked) {\n          location.identifierChain = parser.expandLateralViews(parser.yy.lateralViews, location.identifierChain);\n        }\n        var initialIdentifierChain = location.identifierChain ? location.identifierChain.concat() : undefined;\n        parser.expandIdentifierChain({\n          tablePrimaries: tablePrimaries,\n          wrapper: location,\n          anyOwner: true,\n          isColumnWrapper: true,\n          isColumnLocation: true\n        });\n        if (typeof location.identifierChain === 'undefined') {\n          parser.yy.locations.splice(i, 1);\n        } else if (location.identifierChain.length === 0 && initialIdentifierChain && initialIdentifierChain.length === 1) {\n          // This is for the case \"SELECT tblOrColName FROM db.tblOrColName\";\n          location.identifierChain = initialIdentifierChain;\n        }\n      }\n      if (location.type === 'column' && location.identifierChain) {\n        if (location.identifierChain.length > 1 && location.tables && location.tables.length > 0) {\n          location.type = 'complex';\n        }\n      }\n      delete location.firstInChain;\n      if (location.type !== 'column' && location.type !== 'complex') {\n        delete location.qualified;\n      } else if (typeof location.qualified === 'undefined') {\n        location.qualified = false;\n      }\n    };\n    while (i--) {\n      _loop();\n    }\n    if (parser.yy.locations.length > 0) {\n      parser.yy.allLocations = parser.yy.allLocations.concat(parser.yy.locations);\n      parser.yy.locations = [];\n    }\n  };\n  var prioritizeSuggestions = function prioritizeSuggestions() {\n    parser.yy.result.lowerCase = parser.yy.lowerCase || false;\n    var cteIndex = {};\n    if (typeof parser.yy.latestCommonTableExpressions !== 'undefined') {\n      parser.yy.latestCommonTableExpressions.forEach(function (cte) {\n        cteIndex[cte.alias.toLowerCase()] = cte;\n      });\n    }\n    SIMPLE_TABLE_REF_SUGGESTIONS.forEach(function (suggestionType) {\n      if (suggestionType !== 'suggestAggregateFunctions' && typeof parser.yy.result[suggestionType] !== 'undefined' && parser.yy.result[suggestionType].tables.length === 0) {\n        delete parser.yy.result[suggestionType];\n      } else if (typeof parser.yy.result[suggestionType] !== 'undefined' && typeof parser.yy.result[suggestionType].tables !== 'undefined') {\n        for (var i = parser.yy.result[suggestionType].tables.length - 1; i >= 0; i--) {\n          var table = parser.yy.result[suggestionType].tables[i];\n          if (table.identifierChain.length === 1 && typeof table.identifierChain[0].name !== 'undefined' && typeof cteIndex[table.identifierChain[0].name.toLowerCase()] !== 'undefined') {\n            parser.yy.result[suggestionType].tables.splice(i, 1);\n          }\n        }\n      }\n    });\n    if (typeof parser.yy.result.colRef !== 'undefined') {\n      if (!parser.yy.result.colRef.linked || typeof parser.yy.result.colRef.identifierChain === 'undefined' || parser.yy.result.colRef.identifierChain.length === 0) {\n        delete parser.yy.result.colRef;\n        if (typeof parser.yy.result.suggestColRefKeywords !== 'undefined') {\n          Object.keys(parser.yy.result.suggestColRefKeywords).forEach(function (type) {\n            parser.yy.result.suggestKeywords = parser.yy.result.suggestKeywords.concat(parser.createWeightedKeywords(parser.yy.result.suggestColRefKeywords[type], -1));\n          });\n          delete parser.yy.result.suggestColRefKeywords;\n        }\n        if (parser.yy.result.suggestColumns && parser.yy.result.suggestColumns.types.length === 1 && parser.yy.result.suggestColumns.types[0] === 'COLREF') {\n          parser.yy.result.suggestColumns.types = ['T'];\n        }\n        delete parser.yy.result.suggestValues;\n      }\n    }\n    if (typeof parser.yy.result.colRef !== 'undefined') {\n      if (!parser.yy.result.suggestValues && !parser.yy.result.suggestColRefKeywords && (!parser.yy.result.suggestColumns || parser.yy.result.suggestColumns.types[0] !== 'COLREF')) {\n        delete parser.yy.result.colRef;\n      }\n    }\n    if (typeof parser.yy.result.suggestIdentifiers !== 'undefined' && parser.yy.result.suggestIdentifiers.length > 0) {\n      delete parser.yy.result.suggestTables;\n      delete parser.yy.result.suggestDatabases;\n    }\n    if (typeof parser.yy.result.suggestColumns !== 'undefined') {\n      var suggestColumns = parser.yy.result.suggestColumns;\n      if (typeof suggestColumns.tables === 'undefined' || suggestColumns.tables.length === 0) {\n        delete parser.yy.result.suggestColumns;\n        delete parser.yy.result.subQueries;\n      } else {\n        delete parser.yy.result.suggestTables;\n        delete parser.yy.result.suggestDatabases;\n        suggestColumns.tables.forEach(function (table) {\n          if (typeof table.identifierChain !== 'undefined' && table.identifierChain.length === 1 && typeof table.identifierChain[0].name !== 'undefined') {\n            var cte = cteIndex[table.identifierChain[0].name.toLowerCase()];\n            if (typeof cte !== 'undefined') {\n              delete table.identifierChain[0].name;\n              table.identifierChain[0].cte = cte.alias;\n            }\n          } else if (typeof table.identifierChain === 'undefined' && table.subQuery) {\n            table.identifierChain = [{\n              subQuery: table.subQuery\n            }];\n            delete table.subQuery;\n          }\n        });\n        if (typeof suggestColumns.identifierChain !== 'undefined' && suggestColumns.identifierChain.length === 0) {\n          delete suggestColumns.identifierChain;\n        }\n      }\n    } else {\n      delete parser.yy.result.subQueries;\n    }\n    if (typeof parser.yy.result.suggestJoinConditions !== 'undefined') {\n      if (typeof parser.yy.result.suggestJoinConditions.tables === 'undefined' || parser.yy.result.suggestJoinConditions.tables.length === 0) {\n        delete parser.yy.result.suggestJoinConditions;\n      }\n    }\n    if (typeof parser.yy.result.suggestTables !== 'undefined' && typeof parser.yy.result.commonTableExpressions !== 'undefined') {\n      var ctes = [];\n      parser.yy.result.commonTableExpressions.forEach(function (cte) {\n        var suggestion = {\n          name: cte.alias\n        };\n        if (parser.yy.result.suggestTables.prependFrom) {\n          suggestion.prependFrom = true;\n        }\n        if (parser.yy.result.suggestTables.prependQuestionMark) {\n          suggestion.prependQuestionMark = true;\n        }\n        ctes.push(suggestion);\n      });\n      if (ctes.length > 0) {\n        parser.yy.result.suggestCommonTableExpressions = ctes;\n      }\n    }\n  };\n  parser.expandLateralViews = function (lateralViews, originalIdentifierChain, columnSuggestion) {\n    var identifierChain = originalIdentifierChain.concat(); // Clone in case it's re-used\n    var firstIdentifier = identifierChain[0];\n    if (typeof lateralViews !== 'undefined') {\n      lateralViews.concat().reverse().forEach(function (lateralView) {\n        if (!lateralView.udtf.expression.columnReference) {\n          return;\n        }\n        if (equalIgnoreCase(firstIdentifier.name, lateralView.tableAlias) && identifierChain.length > 1) {\n          identifierChain.shift();\n          firstIdentifier = identifierChain[0];\n          if (columnSuggestion) {\n            delete parser.yy.result.suggestKeywords;\n          }\n        } else if (equalIgnoreCase(firstIdentifier.name, lateralView.tableAlias) && identifierChain.length === 1 && typeof parser.yy.result.suggestColumns !== 'undefined') {\n          if (columnSuggestion) {\n            if (typeof parser.yy.result.suggestIdentifiers === 'undefined') {\n              parser.yy.result.suggestIdentifiers = [];\n            }\n            lateralView.columnAliases.forEach(function (columnAlias) {\n              parser.yy.result.suggestIdentifiers.push({\n                name: columnAlias,\n                type: 'alias'\n              });\n            });\n            delete parser.yy.result.suggestColumns;\n            delete parser.yy.result.suggestKeywords;\n          }\n          return identifierChain;\n        }\n        if (lateralView.columnAliases.indexOf(firstIdentifier.name) !== -1) {\n          if (lateralView.columnAliases.length === 2 && lateralView.udtf[\"function\"].toLowerCase() === 'explode' && equalIgnoreCase(firstIdentifier.name, lateralView.columnAliases[0])) {\n            identifierChain[0] = {\n              name: 'key'\n            };\n          } else if (lateralView.columnAliases.length === 2 && lateralView.udtf[\"function\"].toLowerCase() === 'explode' && equalIgnoreCase(firstIdentifier.name, lateralView.columnAliases[1])) {\n            identifierChain[0] = {\n              name: 'value'\n            };\n          } else {\n            identifierChain[0] = {\n              name: 'item'\n            };\n          }\n          identifierChain = lateralView.udtf.expression.columnReference.concat(identifierChain);\n          firstIdentifier = identifierChain[0];\n        }\n      });\n    }\n    return identifierChain;\n  };\n  var addCleanTablePrimary = function addCleanTablePrimary(tables, tablePrimary) {\n    if (tablePrimary.alias) {\n      tables.push({\n        alias: tablePrimary.alias,\n        identifierChain: tablePrimary.identifierChain\n      });\n    } else {\n      tables.push({\n        identifierChain: tablePrimary.identifierChain\n      });\n    }\n  };\n  parser.expandIdentifierChain = function (options) {\n    var wrapper = options.wrapper;\n    var anyOwner = options.anyOwner;\n    var isColumnWrapper = options.isColumnWrapper;\n    var isColumnLocation = options.isColumnLocation;\n    var tablePrimaries = options.tablePrimaries || parser.yy.latestTablePrimaries;\n    if (typeof wrapper.identifierChain === 'undefined' || typeof tablePrimaries === 'undefined') {\n      return;\n    }\n    var identifierChain = wrapper.identifierChain.concat();\n    if (tablePrimaries.length === 0) {\n      delete wrapper.identifierChain;\n      return;\n    }\n    if (!anyOwner) {\n      tablePrimaries = filterTablePrimariesForOwner(tablePrimaries, wrapper.owner);\n    }\n    if (identifierChain.length > 0 && identifierChain[identifierChain.length - 1].asterisk) {\n      var tables = [];\n      tablePrimaries.forEach(function (tablePrimary) {\n        if (identifierChain.length > 1 && !tablePrimary.subQueryAlias) {\n          if (identifierChain.length === 2 && equalIgnoreCase(tablePrimary.alias, identifierChain[0].name)) {\n            addCleanTablePrimary(tables, tablePrimary);\n          } else if (identifierChain.length === 2 && equalIgnoreCase(tablePrimary.identifierChain[0].name, identifierChain[0].name)) {\n            addCleanTablePrimary(tables, tablePrimary);\n          } else if (identifierChain.length === 3 && tablePrimary.identifierChain.length > 1 && equalIgnoreCase(tablePrimary.identifierChain[0].name, identifierChain[0].name) && equalIgnoreCase(tablePrimary.identifierChain[1].name, identifierChain[1].name)) {\n            addCleanTablePrimary(tables, tablePrimary);\n          }\n        } else if (tablePrimary.subQueryAlias) {\n          tables.push({\n            identifierChain: [{\n              subQuery: tablePrimary.subQueryAlias\n            }]\n          });\n        } else {\n          addCleanTablePrimary(tables, tablePrimary);\n        }\n      });\n      // Possible Joins\n      if (tables.length > 0) {\n        wrapper.tables = tables;\n        delete wrapper.identifierChain;\n        return;\n      }\n    }\n\n    // Expand exploded views in the identifier chain\n    if (identifierChain.length > 0) {\n      identifierChain = parser.expandLateralViews(parser.yy.lateralViews, identifierChain);\n      wrapper.identifierChain = identifierChain;\n    }\n\n    // IdentifierChain contains a possibly started identifier or empty, example: a.b.c = ['a', 'b', 'c']\n    // Reduce the tablePrimaries to the one that matches the first identifier if found\n    var foundPrimary;\n    var doubleMatch = false;\n    var aliasMatch = false;\n    if (identifierChain.length > 0) {\n      for (var i = 0; i < tablePrimaries.length; i++) {\n        if (tablePrimaries[i].subQueryAlias) {\n          if (equalIgnoreCase(tablePrimaries[i].subQueryAlias, identifierChain[0].name)) {\n            foundPrimary = tablePrimaries[i];\n          }\n        } else if (equalIgnoreCase(tablePrimaries[i].alias, identifierChain[0].name)) {\n          foundPrimary = tablePrimaries[i];\n          aliasMatch = true;\n          break;\n        } else if (tablePrimaries[i].identifierChain.length > 1 && identifierChain.length > 1 && equalIgnoreCase(tablePrimaries[i].identifierChain[0].name, identifierChain[0].name) && equalIgnoreCase(tablePrimaries[i].identifierChain[1].name, identifierChain[1].name)) {\n          foundPrimary = tablePrimaries[i];\n          doubleMatch = true;\n          break;\n        } else if (!foundPrimary && equalIgnoreCase(tablePrimaries[i].identifierChain[0].name, identifierChain[0].name) && identifierChain.length > (isColumnLocation ? 1 : 0)) {\n          foundPrimary = tablePrimaries[i];\n          // No break as first two can still match.\n        } else if (!foundPrimary && tablePrimaries[i].identifierChain.length > 1 && !tablePrimaries[i].alias && equalIgnoreCase(tablePrimaries[i].identifierChain[tablePrimaries[i].identifierChain.length - 1].name, identifierChain[0].name)) {\n          // This is for the case SELECT baa. FROM bla.baa, blo.boo;\n          foundPrimary = tablePrimaries[i];\n          break;\n        }\n      }\n    }\n    if (foundPrimary) {\n      identifierChain.shift();\n      if (doubleMatch) {\n        identifierChain.shift();\n      }\n    } else if (tablePrimaries.length === 1 && !isColumnWrapper) {\n      foundPrimary = tablePrimaries[0];\n    }\n    if (foundPrimary) {\n      if (isColumnWrapper) {\n        wrapper.identifierChain = identifierChain;\n        if (foundPrimary.subQueryAlias) {\n          wrapper.tables = [{\n            subQuery: foundPrimary.subQueryAlias\n          }];\n        } else if (foundPrimary.alias) {\n          if (!isColumnLocation && isColumnWrapper && aliasMatch) {\n            // TODO: add alias on table in suggestColumns (needs support in sqlAutocomplete3.js)\n            // the case is: SELECT cu.| FROM customers cu;\n            // This prevents alias from being added automatically in sqlAutocompleter.js\n            wrapper.tables = [{\n              identifierChain: foundPrimary.identifierChain\n            }];\n          } else {\n            wrapper.tables = [{\n              identifierChain: foundPrimary.identifierChain,\n              alias: foundPrimary.alias\n            }];\n          }\n        } else {\n          wrapper.tables = [{\n            identifierChain: foundPrimary.identifierChain\n          }];\n        }\n      } else {\n        if (foundPrimary.subQueryAlias) {\n          identifierChain.unshift({\n            subQuery: foundPrimary.subQueryAlias\n          });\n        } else {\n          identifierChain = foundPrimary.identifierChain.concat(identifierChain);\n        }\n        if (wrapper.tables) {\n          wrapper.tables.push({\n            identifierChain: identifierChain\n          });\n          delete wrapper.identifierChain;\n        } else {\n          wrapper.identifierChain = identifierChain;\n        }\n      }\n    } else {\n      if (isColumnWrapper) {\n        wrapper.tables = [];\n      }\n      tablePrimaries.forEach(function (tablePrimary) {\n        var targetTable = tablePrimary.subQueryAlias ? {\n          subQuery: tablePrimary.subQueryAlias\n        } : {\n          identifierChain: tablePrimary.identifierChain\n        };\n        if (tablePrimary.alias) {\n          targetTable.alias = tablePrimary.alias;\n        }\n        if (wrapper.tables) {\n          wrapper.tables.push(targetTable);\n        }\n      });\n    }\n    delete wrapper.owner;\n    wrapper.linked = true;\n  };\n  var suggestLateralViewAliasesAsIdentifiers = function suggestLateralViewAliasesAsIdentifiers() {\n    if (typeof parser.yy.lateralViews === 'undefined' || parser.yy.lateralViews.length === 0) {\n      return;\n    }\n    if (typeof parser.yy.result.suggestIdentifiers === 'undefined') {\n      parser.yy.result.suggestIdentifiers = [];\n    }\n    parser.yy.lateralViews.forEach(function (lateralView) {\n      if (typeof lateralView.tableAlias !== 'undefined') {\n        parser.yy.result.suggestIdentifiers.push({\n          name: lateralView.tableAlias + '.',\n          type: 'alias'\n        });\n      }\n      lateralView.columnAliases.forEach(function (columnAlias) {\n        parser.yy.result.suggestIdentifiers.push({\n          name: columnAlias,\n          type: 'alias'\n        });\n      });\n    });\n    if (parser.yy.result.suggestIdentifiers.length === 0) {\n      delete parser.yy.result.suggestIdentifiers;\n    }\n  };\n  var filterTablePrimariesForOwner = function filterTablePrimariesForOwner(tablePrimaries, owner) {\n    var result = [];\n    tablePrimaries.forEach(function (primary) {\n      if (typeof owner === 'undefined' && typeof primary.owner === 'undefined') {\n        result.push(primary);\n      } else if (owner === primary.owner) {\n        result.push(primary);\n      }\n    });\n    return result;\n  };\n  var convertTablePrimariesToSuggestions = function convertTablePrimariesToSuggestions(tablePrimaries) {\n    var tables = [];\n    var identifiers = [];\n    tablePrimaries.forEach(function (tablePrimary) {\n      if (tablePrimary.identifierChain && tablePrimary.identifierChain.length > 0) {\n        var table = {\n          identifierChain: tablePrimary.identifierChain\n        };\n        if (tablePrimary.alias) {\n          table.alias = tablePrimary.alias;\n          identifiers.push({\n            name: table.alias + '.',\n            type: 'alias'\n          });\n        } else {\n          var lastIdentifier = tablePrimary.identifierChain[tablePrimary.identifierChain.length - 1];\n          if (typeof lastIdentifier.name !== 'undefined') {\n            identifiers.push({\n              name: lastIdentifier.name + '.',\n              type: 'table'\n            });\n          } else if (typeof lastIdentifier.subQuery !== 'undefined') {\n            identifiers.push({\n              name: lastIdentifier.subQuery + '.',\n              type: 'sub-query'\n            });\n          }\n        }\n        tables.push(table);\n      } else if (tablePrimary.subQueryAlias) {\n        identifiers.push({\n          name: tablePrimary.subQueryAlias + '.',\n          type: 'sub-query'\n        });\n        tables.push({\n          identifierChain: [{\n            subQuery: tablePrimary.subQueryAlias\n          }]\n        });\n      }\n    });\n    if (identifiers.length > 0) {\n      if (typeof parser.yy.result.suggestIdentifiers === 'undefined') {\n        parser.yy.result.suggestIdentifiers = identifiers;\n      } else {\n        parser.yy.result.suggestIdentifiers = identifiers.concat(parser.yy.result.suggestIdentifiers);\n      }\n    }\n    parser.yy.result.suggestColumns.tables = tables;\n    if (parser.yy.result.suggestColumns.identifierChain && parser.yy.result.suggestColumns.identifierChain.length === 0) {\n      delete parser.yy.result.suggestColumns.identifierChain;\n    }\n    parser.yy.result.suggestColumns.linked = true;\n  };\n  var linkTablePrimaries = function linkTablePrimaries() {\n    if (!parser.yy.cursorFound || typeof parser.yy.latestTablePrimaries === 'undefined') {\n      return;\n    }\n    SIMPLE_TABLE_REF_SUGGESTIONS.forEach(function (suggestionType) {\n      if (typeof parser.yy.result[suggestionType] !== 'undefined' && parser.yy.result[suggestionType].tablePrimaries && !parser.yy.result[suggestionType].linked) {\n        parser.yy.result[suggestionType].tables = [];\n        parser.yy.result[suggestionType].tablePrimaries.forEach(function (tablePrimary) {\n          if (!tablePrimary.subQueryAlias) {\n            parser.yy.result[suggestionType].tables.push(tablePrimary.alias ? {\n              identifierChain: tablePrimary.identifierChain.concat(),\n              alias: tablePrimary.alias\n            } : {\n              identifierChain: tablePrimary.identifierChain.concat()\n            });\n          }\n        });\n        delete parser.yy.result[suggestionType].tablePrimaries;\n        parser.yy.result[suggestionType].linked = true;\n      }\n    });\n    if (typeof parser.yy.result.suggestColumns !== 'undefined' && !parser.yy.result.suggestColumns.linked) {\n      var tablePrimaries = filterTablePrimariesForOwner(parser.yy.latestTablePrimaries, parser.yy.result.suggestColumns.owner);\n      if (!parser.yy.result.suggestColumns.tables) {\n        parser.yy.result.suggestColumns.tables = [];\n      }\n      if (parser.yy.subQueries.length > 0) {\n        parser.yy.result.subQueries = parser.yy.subQueries;\n      }\n      if (typeof parser.yy.result.suggestColumns.identifierChain === 'undefined' || parser.yy.result.suggestColumns.identifierChain.length === 0) {\n        if (tablePrimaries.length > 1) {\n          convertTablePrimariesToSuggestions(tablePrimaries);\n        } else {\n          suggestLateralViewAliasesAsIdentifiers();\n          if (tablePrimaries.length === 1 && (tablePrimaries[0].alias || tablePrimaries[0].subQueryAlias)) {\n            convertTablePrimariesToSuggestions(tablePrimaries);\n          }\n          parser.expandIdentifierChain({\n            wrapper: parser.yy.result.suggestColumns,\n            anyOwner: false,\n            isColumnWrapper: true\n          });\n        }\n      } else if (!parser.yy.result.suggestColumns.linked) {\n        // Expand exploded views in the identifier chain\n        var originalLength = parser.yy.result.suggestColumns.identifierChain.length;\n        parser.yy.result.suggestColumns.identifierChain = parser.expandLateralViews(parser.yy.lateralViews, parser.yy.result.suggestColumns.identifierChain, true);\n        // Drop '*' keyword for lateral views\n        if (typeof parser.yy.result.suggestColumns !== 'undefined') {\n          if (parser.yy.result.suggestColumns.identifierChain.length > originalLength && typeof parser.yy.result.suggestKeywords !== 'undefined' && parser.yy.result.suggestKeywords.length === 1 && parser.yy.result.suggestKeywords[0].value === '*') {\n            delete parser.yy.result.suggestKeywords;\n          }\n          parser.expandIdentifierChain({\n            wrapper: parser.yy.result.suggestColumns,\n            anyOwner: false,\n            isColumnWrapper: true\n          });\n        }\n      } else {\n        parser.expandIdentifierChain({\n          wrapper: parser.yy.result.suggestColumns,\n          anyOwner: false,\n          isColumnWrapper: true\n        });\n      }\n    }\n    if (typeof parser.yy.result.colRef !== 'undefined' && !parser.yy.result.colRef.linked) {\n      parser.expandIdentifierChain({\n        wrapper: parser.yy.result.colRef\n      });\n      var primaries = filterTablePrimariesForOwner(parser.yy.latestTablePrimaries);\n      if (primaries.length === 0 || primaries.length > 1 && parser.yy.result.colRef.identifierChain.length === 1) {\n        parser.yy.result.colRef.identifierChain = [];\n      }\n    }\n    if (typeof parser.yy.result.suggestKeyValues !== 'undefined' && !parser.yy.result.suggestKeyValues.linked) {\n      parser.expandIdentifierChain({\n        wrapper: parser.yy.result.suggestKeyValues\n      });\n    }\n  };\n  parser.addTablePrimary = function (ref) {\n    if (typeof parser.yy.latestTablePrimaries === 'undefined') {\n      parser.yy.latestTablePrimaries = [];\n    }\n    parser.yy.latestTablePrimaries.push(ref);\n  };\n  parser.suggestFileFormats = function () {\n    parser.suggestKeywords(['AVRO', 'INPUTFORMAT', 'JSONFILE', 'ORC', 'PARQUET', 'RCFILE', 'SEQUENCEFILE', 'TEXTFILE']);\n  };\n  parser.suggestKeywordsForOptionalsLR = function (optionals, keywords, override) {\n    var result = parser.getKeywordsForOptionalsLR(optionals, keywords, override);\n    if (result.length) {\n      parser.suggestKeywords(result);\n    }\n  };\n  parser.getKeywordsForOptionalsLR = function (optionals, keywords, override) {\n    var result = [];\n    for (var i = 0; i < optionals.length; i++) {\n      if (!optionals[i] && (typeof override === 'undefined' || override[i])) {\n        if (keywords[i] instanceof Array) {\n          result = result.concat(keywords[i]);\n        } else {\n          result.push(keywords[i]);\n        }\n      } else if (optionals[i]) {\n        break;\n      }\n    }\n    return result;\n  };\n  parser.suggestDdlAndDmlKeywords = function (extraKeywords) {\n    var keywords = parser.DDL_AND_DML_KEYWORDS;\n    if (extraKeywords) {\n      keywords = keywords.concat(extraKeywords);\n    }\n    parser.suggestKeywords(keywords);\n  };\n  parser.checkForSelectListKeywords = function (selectList) {\n    if (selectList.length === 0) {\n      return;\n    }\n    var last = selectList[selectList.length - 1];\n    if (!last || !last.valueExpression) {\n      return;\n    }\n    var valueExpressionKeywords = parser.getValueExpressionKeywords(last.valueExpression);\n    var keywords = [];\n    if (last.suggestKeywords) {\n      keywords = keywords.concat(last.suggestKeywords);\n    }\n    if (valueExpressionKeywords.suggestKeywords) {\n      keywords = keywords.concat(valueExpressionKeywords.suggestKeywords);\n    }\n    if (valueExpressionKeywords.suggestColRefKeywords) {\n      parser.suggestColRefKeywords(valueExpressionKeywords.suggestColRefKeywords);\n      parser.addColRefIfExists(last.valueExpression);\n    }\n    if (!last.alias) {\n      keywords.push('AS');\n    }\n    if (keywords.length > 0) {\n      parser.suggestKeywords(keywords);\n    }\n  };\n  parser.checkForKeywords = function (expression) {\n    if (expression) {\n      if (expression.suggestKeywords && expression.suggestKeywords.length > 0) {\n        parser.suggestKeywords(expression.suggestKeywords);\n      }\n      if (expression.suggestColRefKeywords) {\n        parser.suggestColRefKeywords(expression.suggestColRefKeywords);\n        parser.addColRefIfExists(expression);\n      }\n    }\n  };\n  parser.createWeightedKeywords = function (keywords, weight) {\n    var result = [];\n    keywords.forEach(function (keyword) {\n      if (typeof keyword.weight !== 'undefined') {\n        keyword.weight = weight + keyword.weight / 10;\n        result.push(keyword);\n      } else {\n        result.push({\n          value: keyword,\n          weight: weight\n        });\n      }\n    });\n    return result;\n  };\n  parser.KEYWORDS = KEYWORDS;\n  parser.suggestColRefKeywords = function (colRefKeywords) {\n    parser.yy.result.suggestColRefKeywords = colRefKeywords;\n  };\n  parser.suggestTablesOrColumns = function (identifier) {\n    if (typeof parser.yy.latestTablePrimaries == 'undefined') {\n      parser.suggestTables({\n        identifierChain: [{\n          name: identifier\n        }]\n      });\n      return;\n    }\n    var tableRef = parser.yy.latestTablePrimaries.filter(function (tablePrimary) {\n      return equalIgnoreCase(tablePrimary.alias, identifier);\n    });\n    if (tableRef.length > 0) {\n      parser.suggestColumns({\n        identifierChain: [{\n          name: identifier\n        }]\n      });\n    } else {\n      parser.suggestTables({\n        identifierChain: [{\n          name: identifier\n        }]\n      });\n    }\n  };\n  parser.suggestFunctions = function (details) {\n    parser.yy.result.suggestFunctions = details || {};\n  };\n  parser.suggestAggregateFunctions = function () {\n    var primaries = [];\n    var aliases = {};\n    parser.yy.latestTablePrimaries.forEach(function (primary) {\n      if (typeof primary.alias !== 'undefined') {\n        aliases[primary.alias] = true;\n      }\n      // Drop if the first one refers to a table alias (...FROM tbl t, t.map tm ...)\n      if (typeof primary.identifierChain !== 'undefined' && !aliases[primary.identifierChain[0].name] && typeof primary.owner === 'undefined') {\n        primaries.push(primary);\n      }\n    });\n    parser.yy.result.suggestAggregateFunctions = {\n      tablePrimaries: primaries\n    };\n  };\n  parser.suggestAnalyticFunctions = function () {\n    parser.yy.result.suggestAnalyticFunctions = true;\n  };\n  parser.suggestSetOptions = function () {\n    parser.yy.result.suggestSetOptions = true;\n  };\n  parser.suggestIdentifiers = function (identifiers) {\n    parser.yy.result.suggestIdentifiers = identifiers;\n  };\n  parser.suggestColumns = function (details) {\n    if (typeof details === 'undefined') {\n      details = {\n        identifierChain: []\n      };\n    } else if (typeof details.identifierChain === 'undefined') {\n      details.identifierChain = [];\n    }\n    parser.yy.result.suggestColumns = details;\n  };\n  parser.suggestGroupBys = function (details) {\n    parser.yy.result.suggestGroupBys = details || {};\n  };\n  parser.suggestOrderBys = function (details) {\n    parser.yy.result.suggestOrderBys = details || {};\n  };\n  parser.suggestFilters = function (details) {\n    parser.yy.result.suggestFilters = details || {};\n  };\n  parser.suggestKeyValues = function (details) {\n    parser.yy.result.suggestKeyValues = details || {};\n  };\n  parser.suggestTables = function (details) {\n    parser.yy.result.suggestTables = details || {};\n  };\n  parser.firstDefined = function () {\n    for (var i = 0; i + 1 < arguments.length; i += 2) {\n      if (arguments[i]) {\n        return arguments[i + 1];\n      }\n    }\n  };\n  parser.addColRefToVariableIfExists = function (left, right) {\n    if (left && left.columnReference && left.columnReference.length && right && right.columnReference && right.columnReference.length && parser.yy.locations.length > 1) {\n      var addColRefToVariableLocation = function addColRefToVariableLocation(variableValue, colRef) {\n        // See if colref is actually an alias\n        if (colRef.length === 1 && colRef[0].name) {\n          parser.yy.locations.some(function (location) {\n            if (location.type === 'column' && location.alias === colRef[0].name) {\n              colRef = location.identifierChain;\n              return true;\n            }\n          });\n        }\n        for (var i = parser.yy.locations.length - 1; i > 0; i--) {\n          var location = parser.yy.locations[i];\n          if (location.type === 'variable' && location.value === variableValue) {\n            location.colRef = {\n              identifierChain: colRef\n            };\n            break;\n          }\n        }\n      };\n      if (/\\${[^}]*}/.test(left.columnReference[0].name)) {\n        // left is variable\n        addColRefToVariableLocation(left.columnReference[0].name, right.columnReference);\n      } else if (/\\${[^}]*}/.test(right.columnReference[0].name)) {\n        // right is variable\n        addColRefToVariableLocation(right.columnReference[0].name, left.columnReference);\n      }\n    }\n  };\n  parser.suggestDatabases = function (details) {\n    parser.yy.result.suggestDatabases = details || {};\n  };\n  parser.suggestHdfs = function (details) {\n    parser.yy.result.suggestHdfs = details || {};\n  };\n  parser.suggestValues = function (details) {\n    parser.yy.result.suggestValues = details || {};\n  };\n  parser.determineCase = function (text) {\n    if (!parser.yy.caseDetermined) {\n      parser.yy.lowerCase = text.toLowerCase() === text;\n      parser.yy.caseDetermined = true;\n    }\n  };\n  parser.handleQuotedValueWithCursor = function (lexer, yytext, yylloc, quoteChar) {\n    if (yytext.indexOf(\"\\u2020\") !== -1 || yytext.indexOf(\"\\u2021\") !== -1) {\n      parser.yy.partialCursor = yytext.indexOf(\"\\u2021\") !== -1;\n      var cursorIndex = parser.yy.partialCursor ? yytext.indexOf(\"\\u2021\") : yytext.indexOf(\"\\u2020\");\n      parser.yy.cursorFound = {\n        first_line: yylloc.first_line,\n        last_line: yylloc.last_line,\n        first_column: yylloc.first_column + cursorIndex,\n        last_column: yylloc.first_column + cursorIndex + 1\n      };\n      var remainder = yytext.substring(cursorIndex + 1);\n      var remainingQuotes = (lexer.upcomingInput().match(new RegExp(quoteChar, 'g')) || []).length;\n      if (remainingQuotes > 0 && (remainingQuotes & 1) !== 0) {\n        parser.yy.missingEndQuote = false;\n        lexer.input();\n      } else {\n        parser.yy.missingEndQuote = true;\n        lexer.unput(remainder);\n      }\n      lexer.popState();\n      return true;\n    }\n    return false;\n  };\n  var lexerModified = false;\n\n  /**\n   * Main parser function\n   */\n  parser.parseSql = function (beforeCursor, afterCursor, debug) {\n    // Jison counts CRLF as two lines in the locations\n    beforeCursor = beforeCursor.replace(/\\r\\n|\\n\\r/gm, '\\n');\n    afterCursor = afterCursor.replace(/\\r\\n|\\n\\r/gm, '\\n');\n    parser.yy.result = {\n      locations: []\n    };\n    parser.yy.lowerCase = false;\n    parser.yy.locations = [];\n    parser.yy.definitions = [];\n    parser.yy.allLocations = [];\n    parser.yy.subQueries = [];\n    parser.yy.errors = [];\n    parser.yy.selectListAliases = [];\n    parser.yy.locationsStack = [];\n    parser.yy.primariesStack = [];\n    parser.yy.lateralViewsStack = [];\n    parser.yy.subQueriesStack = [];\n    parser.yy.resultStack = [];\n    parser.yy.selectListAliasesStack = [];\n    parser.yy.activeDialect = 'hive';\n    delete parser.yy.caseDetermined;\n    delete parser.yy.cursorFound;\n    delete parser.yy.partialCursor;\n\n    // Fix for parser bug when switching lexer states\n    if (!lexerModified) {\n      var originalSetInput = parser.lexer.setInput;\n      parser.lexer.setInput = function (input, yy) {\n        return originalSetInput.bind(parser.lexer)(input, yy);\n      };\n      lexerModified = true;\n    }\n    parser.prepareNewStatement();\n    var REASONABLE_SURROUNDING_LENGTH = 150000; // About 3000 lines before and after\n\n    if (beforeCursor.length > REASONABLE_SURROUNDING_LENGTH) {\n      if (beforeCursor.length - beforeCursor.lastIndexOf(';') > REASONABLE_SURROUNDING_LENGTH) {\n        // Bail out if the last complete statement is more than 150000 chars before\n        return {};\n      }\n      // Cut it at the first statement found within 150000 chars before\n      var lastReasonableChunk = beforeCursor.substring(beforeCursor.length - REASONABLE_SURROUNDING_LENGTH);\n      beforeCursor = lastReasonableChunk.substring(lastReasonableChunk.indexOf(';') + 1);\n    }\n    if (afterCursor.length > REASONABLE_SURROUNDING_LENGTH) {\n      if (afterCursor.length - afterCursor.indexOf(';') > REASONABLE_SURROUNDING_LENGTH) {\n        // No need to bail out for what's comes after, we can still get keyword completion\n        afterCursor = '';\n      } else {\n        // Cut it at the last statement found within 150000 chars after\n        var firstReasonableChunk = afterCursor.substring(0, REASONABLE_SURROUNDING_LENGTH);\n        afterCursor = firstReasonableChunk.substring(0, firstReasonableChunk.lastIndexOf(';'));\n      }\n    }\n    parser.yy.partialLengths = parser.identifyPartials(beforeCursor, afterCursor);\n    if (parser.yy.partialLengths.left > 0) {\n      beforeCursor = beforeCursor.substring(0, beforeCursor.length - parser.yy.partialLengths.left);\n    }\n    if (parser.yy.partialLengths.right > 0) {\n      afterCursor = afterCursor.substring(parser.yy.partialLengths.right);\n    }\n    var result;\n    try {\n      // Add |CURSOR| or |PARTIAL_CURSOR| to represent the different cursor states in the lexer\n      result = parser.parse(beforeCursor + (beforeCursor.length === 0 || /[\\s(]$/.test(beforeCursor) ? \" \\u2020 \" : \"\\u2021\") + afterCursor);\n    } catch (err) {\n      // On any error try to at least return any existing result\n      if (typeof parser.yy.result === 'undefined') {\n        throw err;\n      }\n      if (debug) {\n        console.warn(err);\n        console.warn(err.stack);\n      }\n      result = parser.yy.result;\n    }\n    if (parser.yy.errors.length > 0) {\n      parser.yy.result.errors = parser.yy.errors;\n      if (debug) {\n        console.warn(parser.yy.errors);\n      }\n    }\n    try {\n      linkTablePrimaries();\n      parser.commitLocations();\n      // Clean up and prioritize\n      adjustForPartialBackticks(parser);\n      prioritizeSuggestions();\n    } catch (err) {\n      if (debug) {\n        console.warn(err);\n        console.warn(err.stack);\n      }\n    }\n    parser.yy.allLocations.sort(function (a, b) {\n      if (a.location.first_line !== b.location.first_line) {\n        return a.location.first_line - b.location.first_line;\n      }\n      if (a.location.first_column !== b.location.first_column) {\n        return a.location.first_column - b.location.first_column;\n      }\n      if (a.location.last_column !== b.location.last_column) {\n        return b.location.last_column - a.location.last_column;\n      }\n      return b.type.localeCompare(a.type);\n    });\n    parser.yy.result.locations = parser.yy.allLocations;\n    parser.yy.result.definitions = parser.yy.definitions;\n    parser.yy.result.locations.forEach(function (location) {\n      delete location.linked;\n    });\n    if (typeof parser.yy.result.suggestColumns !== 'undefined') {\n      delete parser.yy.result.suggestColumns.linked;\n    }\n    SIMPLE_TABLE_REF_SUGGESTIONS.forEach(function (suggestionType) {\n      if (typeof parser.yy.result[suggestionType] !== 'undefined') {\n        delete parser.yy.result[suggestionType].linked;\n      }\n    });\n    if (typeof parser.yy.result.colRef !== 'undefined') {\n      delete parser.yy.result.colRef.linked;\n    }\n    if (typeof parser.yy.result.suggestKeyValues !== 'undefined') {\n      delete parser.yy.result.suggestKeyValues.linked;\n    }\n    if (typeof result.error !== 'undefined' && typeof result.error.expected !== 'undefined') {\n      // Remove the cursor from expected tokens\n      result.error.expected = result.error.expected.filter(function (token) {\n        return token.indexOf('CURSOR') === -1;\n      });\n    }\n    if (typeof result.error !== 'undefined' && result.error.recoverable) {\n      delete result.error;\n    }\n\n    // Adjust all the statement locations to include white space surrounding them\n    var lastStatementLocation = null;\n    result.locations.forEach(function (location) {\n      if (location.type === 'statement') {\n        if (lastStatementLocation === null) {\n          location.location.first_line = 1;\n          location.location.first_column = 1;\n        } else {\n          location.location.first_line = lastStatementLocation.location.last_line;\n          location.location.first_column = lastStatementLocation.location.last_column + 1;\n        }\n        lastStatementLocation = location;\n      }\n    });\n    return result;\n  };\n};\nexport default {\n  initSqlParser: initSqlParser,\n  initSyntaxParser: initSyntaxParser\n};"],"names":[],"sourceRoot":""}
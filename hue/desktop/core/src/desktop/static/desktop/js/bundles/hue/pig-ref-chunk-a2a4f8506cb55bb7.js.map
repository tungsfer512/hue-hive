{"version":3,"file":"pig-ref-chunk-a2a4f8506cb55bb7.js","mappingssources":["webpack:///./desktop/core/src/desktop/js/sql/reference/pig/udfReference.ts"],"sourcesContent":["// Licensed to Cloudera, Inc. under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  Cloudera, Inc. licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport I18n from \"../../../utils/i18n\";\nvar EVAL_FUNCTIONS = {\n  avg: {\n    name: 'avg',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'AVG(%VAR%)',\n    draggable: 'AVG()'\n  },\n  concat: {\n    name: 'concat',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'CONCAT(%VAR1%, %VAR2%)',\n    draggable: 'CONCAT()'\n  },\n  count: {\n    name: 'count',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'COUNT(%VAR%)',\n    draggable: 'COUNT()'\n  },\n  count_start: {\n    name: 'count_start',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'COUNT_START(%VAR%)',\n    draggable: 'COUNT_START()'\n  },\n  is_empty: {\n    name: 'is_empty',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'IsEmpty(%VAR%)',\n    draggable: 'IsEmpty()'\n  },\n  diff: {\n    name: 'diff',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'DIFF(%VAR1%, %VAR2%)',\n    draggable: 'DIFF()'\n  },\n  max: {\n    name: 'max',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'MAX(%VAR%)',\n    draggable: 'MAX()'\n  },\n  min: {\n    name: 'min',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'MIN(%VAR%)',\n    draggable: 'MIN()'\n  },\n  size: {\n    name: 'size',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'SIZE(%VAR%)',\n    draggable: 'SIZE()'\n  },\n  sum: {\n    name: 'sum',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'SUM(%VAR%)',\n    draggable: 'SUM()'\n  },\n  tokenize: {\n    name: 'tokenize',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'TOKENIZE(%VAR%, %DELIM%)',\n    draggable: 'TOKENIZE()'\n  }\n};\nvar RELATIONAL_OPERATORS = {\n  cogroup: {\n    name: 'cogroup',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'COGROUP %VAR% BY %VAR%',\n    draggable: 'COGROUP %VAR% BY %VAR%'\n  },\n  cross: {\n    name: 'cross',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'CROSS %VAR1%, %VAR2%;',\n    draggable: 'CROSS %VAR1%, %VAR2%;'\n  },\n  distinct: {\n    name: 'distinct',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'DISTINCT %VAR%;',\n    draggable: 'DISTINCT %VAR%;'\n  },\n  filter: {\n    name: 'filter',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'FILTER %VAR% BY %COND%',\n    draggable: 'FILTER %VAR% BY %COND%'\n  },\n  flatten: {\n    name: 'flatten',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'FLATTEN(%VAR%)',\n    draggable: 'FLATTEN()'\n  },\n  foreach_generate: {\n    name: 'foreach_generate',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'FOREACH %DATA% GENERATE %NEW_DATA%;',\n    draggable: 'FOREACH %DATA% GENERATE %NEW_DATA%;'\n  },\n  foreach: {\n    name: 'foreach',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'FOREACH %DATA% {%NESTED_BLOCK%};',\n    draggable: 'FOREACH %DATA% {%NESTED_BLOCK%};'\n  },\n  group_by: {\n    name: 'group_by',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'GROUP %VAR% BY %VAR%',\n    draggable: 'GROUP %VAR% BY %VAR%'\n  },\n  group_all: {\n    name: 'group_all',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'GROUP %VAR% ALL',\n    draggable: 'GROUP %VAR% ALL'\n  },\n  join: {\n    name: 'join',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'JOIN %VAR% BY ',\n    draggable: 'JOIN %VAR% BY '\n  },\n  limit: {\n    name: 'limit',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'LIMIT %VAR% %N%',\n    draggable: 'LIMIT %VAR% %N%'\n  },\n  order: {\n    name: 'order',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'ORDER %VAR% BY %FIELD%',\n    draggable: 'ORDER %VAR% BY %FIELD%'\n  },\n  sample: {\n    name: 'sample',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'SAMPLE %VAR% %SIZE%',\n    draggable: 'SAMPLE %VAR% %SIZE%'\n  },\n  split: {\n    name: 'split',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'SPLIT %VAR1% INTO %VAR2% IF %EXPRESSIONS%',\n    draggable: 'SPLIT %VAR1% INTO %VAR2% IF %EXPRESSIONS%'\n  },\n  union: {\n    name: 'union',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'UNION %VAR1%, %VAR2%',\n    draggable: 'UNION %VAR1%, %VAR2%'\n  }\n};\nvar INPUT_OUTPUT = {\n  load: {\n    name: 'load',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: \"LOAD '%FILE%';\",\n    draggable: \"LOAD '%FILE%';\"\n  },\n  dump: {\n    name: 'dump',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'DUMP %VAR%;',\n    draggable: 'DUMP %VAR%;'\n  },\n  store: {\n    name: 'store',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'STORE %VAR% INTO %PATH%;',\n    draggable: 'STORE %VAR% INTO %PATH%;'\n  }\n};\nvar DEBUG = {\n  explain: {\n    name: 'explain',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'EXPLAIN %VAR%;',\n    draggable: 'EXPLAIN %VAR%;'\n  },\n  illustrate: {\n    name: 'illustrate',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'ILLUSTRATE %VAR%;',\n    draggable: 'ILLUSTRATE %VAR%;'\n  },\n  describe: {\n    name: 'describe',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'DESCRIBE %VAR%;',\n    draggable: 'DESCRIBE %VAR%;'\n  }\n};\nvar HCATALOG = {\n  LOAD: {\n    name: 'LOAD',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: \"LOAD '%TABLE%' USING org.apache.hcatalog.pig.HCatLoader();\",\n    draggable: \"LOAD '%TABLE%' USING org.apache.hcatalog.pig.HCatLoader();\"\n  }\n};\nvar MATH_FUNCTIONS = {\n  abs: {\n    name: 'abs',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'ABS(%VAR%)',\n    draggable: 'ABS()'\n  },\n  acos: {\n    name: 'acos',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'ACOS(%VAR%)',\n    draggable: 'ACOS()'\n  },\n  asin: {\n    name: 'asin',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'ASIN(%VAR%)',\n    draggable: 'ASIN()'\n  },\n  atan: {\n    name: 'atan',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'ATAN(%VAR%)',\n    draggable: 'ATAN()'\n  },\n  cbrt: {\n    name: 'cbrt',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'CBRT(%VAR%)',\n    draggable: 'CBRT()'\n  },\n  ceil: {\n    name: 'ceil',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'CEIL(%VAR%)',\n    draggable: 'CEIL()'\n  },\n  cos: {\n    name: 'cos',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'COS(%VAR%)',\n    draggable: 'COS()'\n  },\n  cosh: {\n    name: 'cosh',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'COSH(%VAR%)',\n    draggable: 'COSH()'\n  },\n  exp: {\n    name: 'exp',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'EXP(%VAR%)',\n    draggable: 'EXP()'\n  },\n  floor: {\n    name: 'floor',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'FLOOR(%VAR%)',\n    draggable: 'FLOOR()'\n  },\n  log: {\n    name: 'log',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'LOG(%VAR%)',\n    draggable: 'LOG()'\n  },\n  log10: {\n    name: 'log10',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'LOG10(%VAR%)',\n    draggable: 'LOG10()'\n  },\n  random: {\n    name: 'random',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'RANDOM(%VAR%)',\n    draggable: 'RANDOM()'\n  },\n  round: {\n    name: 'round',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'ROUND(%VAR%)',\n    draggable: 'ROUND()'\n  },\n  sin: {\n    name: 'sin',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'SIN(%VAR%)',\n    draggable: 'SIN()'\n  },\n  sinh: {\n    name: 'sinh',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'SINH(%VAR%)',\n    draggable: 'SINH()'\n  },\n  sqrt: {\n    name: 'sqrt',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'SQRT(%VAR%)',\n    draggable: 'SQRT()'\n  },\n  tan: {\n    name: 'tan',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'TAN(%VAR%)',\n    draggable: 'TAN()'\n  },\n  tanh: {\n    name: 'tanh',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'TANH(%VAR%)',\n    draggable: 'TANH()'\n  }\n};\nvar TUPLE_BAG_MAP = {\n  totuple: {\n    name: 'totuple',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'TOTUPLE(%VAR%)',\n    draggable: 'TOTUPLE()'\n  },\n  tobag: {\n    name: 'tobag',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'TOBAG(%VAR%)',\n    draggable: 'TOBAG()'\n  },\n  tomap: {\n    name: 'tomap',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'TOMAP(%KEY%, %VALUE%)',\n    draggable: 'TOMAP()'\n  },\n  top: {\n    name: 'top',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'TOP(%topN%, %COLUMN%, %RELATION%)',\n    draggable: 'TOP()'\n  }\n};\nvar STRING_FUNCTIONS = {\n  indexof: {\n    name: 'indexof',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: \"INDEXOF(%STRING%, '%CHARACTER%', %STARTINDEX%)\",\n    draggable: 'INDEXOF()'\n  },\n  last_index_of: {\n    name: 'last_index_of',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: \"LAST_INDEX_OF(%STRING%, '%CHARACTER%', %STARTINDEX%)\",\n    draggable: 'LAST_INDEX_OF()'\n  },\n  lower: {\n    name: 'lower',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'LOWER(%STRING%)',\n    draggable: 'LOWER()'\n  },\n  regex_extract: {\n    name: 'regex_extract',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'REGEX_EXTRACT(%STRING%, %REGEX%, %INDEX%)',\n    draggable: 'REGEX_EXTRACT()'\n  },\n  regex_extract_all: {\n    name: 'regex_extract_all',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'REGEX_EXTRACT_ALL(%STRING%, %REGEX%)',\n    draggable: 'REGEX_EXTRACT_ALL()'\n  },\n  replace: {\n    name: 'replace',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: \"REPLACE(%STRING%, '%oldChar%', '%newChar%')\",\n    draggable: 'REPLACE()'\n  },\n  strsplit: {\n    name: 'strsplit',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'STRSPLIT(%STRING%, %REGEX%, %LIMIT%)',\n    draggable: 'STRSPLIT()'\n  },\n  substring: {\n    name: 'substring',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'SUBSTRING(%STRING%, %STARTINDEX%, %STOPINDEX%)',\n    draggable: 'SUBSTRING()'\n  },\n  trim: {\n    name: 'trim',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'TRIM(%STRING%)',\n    draggable: 'TRIM()'\n  },\n  ucfirst: {\n    name: 'ucfirst',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'UCFIRST(%STRING%)',\n    draggable: 'UCFIRST()'\n  },\n  upper: {\n    name: 'upper',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: 'UPPER(%STRING%)',\n    draggable: 'UPPER()'\n  }\n};\nvar MACROS = {\n  \"import\": {\n    name: 'import',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: \"IMPORT '%PATH_TO_MACRO%';\",\n    draggable: \"IMPORT '%PATH_TO_MACRO%';\"\n  }\n};\nvar HBASE = {\n  load: {\n    name: 'load',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: \"LOAD 'hbase://%TABLE%' USING org.apache.pig.backend.hadoop.hbase.HBaseStorage('%columnList%')\",\n    draggable: \"LOAD 'hbase://%TABLE%' USING org.apache.pig.backend.hadoop.hbase.HBaseStorage('%columnList%')\"\n  },\n  store: {\n    name: 'store',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: \"STORE %VAR% INTO 'hbase://%TABLE%' USING org.apache.pig.backend.hadoop.hbase.HBaseStorage('%columnList%')\",\n    draggable: \"STORE %VAR% INTO 'hbase://%TABLE%' USING org.apache.pig.backend.hadoop.hbase.HBaseStorage('%columnList%')\"\n  }\n};\nvar PYTHON_UDF = {\n  register: {\n    name: 'register',\n    returnTypes: ['T'],\n    arguments: [[{\n      type: 'T',\n      multiple: true\n    }]],\n    signature: \"REGISTER 'python_udf.py' USING jython AS myfuncs;\",\n    draggable: \"REGISTER 'python_udf.py' USING jython AS myfuncs;\"\n  }\n};\nexport var UDF_CATEGORIES = [{\n  name: I18n('Eval'),\n  functions: EVAL_FUNCTIONS\n}, {\n  name: I18n('Relational Operators'),\n  functions: RELATIONAL_OPERATORS\n}, {\n  name: I18n('Input and Output'),\n  functions: INPUT_OUTPUT\n}, {\n  name: I18n('Debug'),\n  functions: DEBUG\n}, {\n  name: I18n('HCatalog'),\n  functions: HCATALOG\n}, {\n  name: I18n('Math'),\n  functions: MATH_FUNCTIONS\n}, {\n  name: I18n('Tuple, Bag and Map'),\n  functions: TUPLE_BAG_MAP\n}, {\n  name: I18n('String'),\n  functions: STRING_FUNCTIONS\n}, {\n  name: I18n('Macros'),\n  functions: MACROS\n}, {\n  name: I18n('HBase'),\n  functions: HBASE\n}, {\n  name: I18n('Python UDF'),\n  functions: PYTHON_UDF\n}];"],"names":[],"sourceRoot":""}